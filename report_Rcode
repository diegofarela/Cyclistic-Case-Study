---
title: "Cyclistic2019AnnualReport"
author: "Diego Martinez"
date: '2022-06-24'
output:
  pdf_document: default
  html_document: default
editor_options: 
  markdown: 
    wrap: 72
---

## Cyclistic Case Study

# STEP 1: EXCEL PREPARATION AND LOADING LIBRARIES/DATA IN R

Thd following section describes the changes I performed on Excel. The
main objective of this section is to show my proficiency in Excel, for
all other purposes, this section may be skipped.

As secondary objective, yet just as important, it is to ensure the
documentation of processes.

First, I opened the data containing all bicycle trips on 2019 by our
fictional company Cyclistic. In this case, it is on four .cvs files,
dividing the year in four quarters. As my first tool, I use Excel to
open this files. Even before interacting with the data, I make sure to
load each column on the correct data type. After a swift check for any
major discrepancies, I did data validation on all columns: check for
duplicates, made sure all values were valid and the correct type.

Aside from some null cells, the only column that needed significant
changes was the trip duration column, which in some of the quarters, is
less than zero. After some light research, I found out these were test
drives made by the real company "Cyclist" gets its data from. We will
deal with this later on.

The first quarter has a trip duration column which is pretty useful but
absent on the subsequent quarters, so I took it off for consistency.I
calculate trip duration by subtracting the end and start times and
rename it to ride_length.

#### I will perform the same calculation later on in R because this case study is to show off some of skills after all.

The first quarter also had a different date format so I took note of
that for future calculations. I also dropped the ride_length column
because it is in seconds and I plan to calculate ride_length in
hours:minutes:seconds format; having another column for seconds would be
redundant

In quarter 2 and 4, the data was so large it wouldn't fit the sheet and
as a result data was missing. I imported the missing columns in a new
spreadsheet to investigate. Q2 YMD So big it might not fit spreadsheet,
show how you avoid that. Imported on a new spreadsheet, it only had one
more trip on 6-27. Normally, I want to use all the valid data available
to make the best prediction possible, but since this is a fictional
company, and I already checked for duplicate, I will leave the last trip
out of the Excel analysis part.

Quarter 3 was even less eventful and had less than minor modifications

### Now in R

Let's set our directory

```{r, setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/diegofarela/Desktop/Cyclystic_2019byQuarter/")
# ^ sets our directory to where we keep our data, if you test this locally, make sure to change it
```

Installing all necessary libraries:

```{r pressure, echo=FALSE}
library(tidyverse)  #helps wrangle data
library(lubridate)  #helps wrangle date attributes
library(ggplot2)   #helps visualize data

getwd() 
```
```{r, include=FALSE}
options(tinytex.verbose = TRUE)                  #this is to print out this report as PDF
```

Loading all our data

```{r}
q1_2019 <- read_csv("C_2019_Q1.csv")
q2_2019 <- read_csv("C_2019_Q2.csv")
q3_2019 <- read_csv("C_2019_Q3.csv")
q4_2019 <- read_csv("C_2019_Q4.csv")
```

# STEP 2: WRANGLE DATA AND COMBINE INTO A SINGLE FILE

Compare column names each of the files While the names don't have to be
in the same order, they DO need to match perfectly before we can use a
command to join them into one file

```{r}
colnames(q1_2019)
colnames(q2_2019)
colnames(q3_2019)
colnames(q4_2019)
```

Let's rename our columns/variables to make them consistent

```{r}
(q4_2019 <- rename(q4_2019
                   ,ride_id = trip_id
                   ,rideable_type = bikeid 
                   ,started_at = start_time  
                   ,ended_at = end_time  
                   ,start_station_name = from_station_name 
                   ,start_station_id = from_station_id 
                   ,end_station_name = to_station_name 
                   ,end_station_id = to_station_id 
                   ,member_casual = usertype
                   ,gender = gender
                   ,birthyear = birthyear))

(q3_2019 <- rename(q3_2019
                   ,ride_id = trip_id
                   ,rideable_type = bikeid 
                   ,started_at = start_time  
                   ,ended_at = end_time  
                   ,start_station_name = from_station_name 
                   ,start_station_id = from_station_id 
                   ,end_station_name = to_station_name 
                   ,end_station_id = to_station_id 
                   ,member_casual = usertype
                   ,gender = gender
                   ,birthyear = birthyear))

(q2_2019 <- rename(q2_2019
                   ,ride_id = "01 - Rental Details Rental ID"
                   ,rideable_type = "01 - Rental Details Bike ID" 
                   ,started_at = "01 - Rental Details Local Start Time"  
                   ,ended_at = "01 - Rental Details Local End Time"  
                   ,start_station_name = "03 - Rental Start Station Name" 
                   ,start_station_id = "03 - Rental Start Station ID"
                   ,end_station_name = "02 - Rental End Station Name" 
                   ,end_station_id = "02 - Rental End Station ID"
                   ,member_casual = "User Type"
                   ,gender = "Member Gender"
                   ,birthyear = "05 - Member Details Member Birthday Year"))

(q1_2019 <- rename(q1_2019
                   ,ride_id = trip_id
                   ,rideable_type = bikeid 
                   ,started_at = start_time  
                   ,ended_at = end_time  
                   ,start_station_name = from_station_name 
                   ,start_station_id = from_station_id 
                   ,end_station_name = to_station_name 
                   ,end_station_id = to_station_id 
                   ,member_casual = usertype
                   ,gender = gender
                   ,birthyear = birthyear))
```

Now we convert ride_id and rideable_type to character so that they can
stack correctly and we take the opportunity to turn our char-type dates
into the R classdate so we can perform calculations

```{r}
q4_2019 <-  mutate(q4_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
q3_2019 <-  mutate(q3_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
q2_2019 <-  mutate(q2_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
q1_2019 <-  mutate(q1_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
```

Inspect the dataframes and look for incongruencies

```{r}
str(q1_2019)
str(q2_2019)
str(q3_2019)
str(q4_2019)
```

Stack individual quarter's data frames into one big data frame

```{r}
all_trips <- bind_rows(q1_2019, q2_2019, q3_2019, q4_2019)
```

# STEP 3: CLEAN UP AND ADD DATA TO PREPARE FOR ANALYSIS

Inspect the new table that has been created

```{r}
colnames(all_trips)  #List of column names
nrow(all_trips)  #How many rows are in data frame?
dim(all_trips)  #Dimensions of the data frame?
head(all_trips)  #See the first 6 rows of data frame.  Also tail(all_trips)
str(all_trips)  #See list of columns and data types (numeric, character, etc)
summary(all_trips)  #Statistical summary of data. Mainly for numerics
```

There are a few problems we will need to fix: (1) In the "member_casual"
column, there are two names for members ("member" and "Subscriber") and
two names for casual riders ("Customer" and "casual"). We will need to
consolidate that from four to two labels. (2) The data can only be
aggregated at the ride-level, which is too granular. We will want to add
some additional columns of data -- such as day, month, year -- that
provide additional opportunities to aggregate the data. (3) We will want
to add a calculated field for length of ride since the 2020Q1 data did
not have the "tripduration" column. We will add "ride_length" to the
entire dataframe for consistency. (4) There are some rides where
tripduration shows up as negative, including several hundred rides where
Divvy took bikes out of circulation for Quality Control reasons. We will
want to delete these rides.

In the "member_casual" column, replace "Subscriber" with "member" and
"Customer" with "casual" Before 2020, Divvy used different labels for
these two types of riders ... we will want to make our dataframe
consistent with their current nomenclature N.B.: "Level" is a special
property of a column that is retained even if a subset does not contain
any values from a specific level Begin by seeing how many observations
fall under each usertype

```{r}
table(all_trips$member_casual)
```

Reassign to the desired values (we will go with the current 2020 labels)

```{r}
all_trips <-  all_trips %>% 
  mutate(member_casual = recode(member_casual
                                ,"Subscriber" = "member"
                                ,"Customer" = "casual"))
```

Check to make sure the proper number of observations were reassigned

```{r}
table(all_trips$member_casual)
```

Add columns that list the date, month, day, and year of each ride This
will allow us to aggregate ride data for each month, day, or year ...
before completing these operations we could only aggregate at the ride
level

```{r}
all_trips$date <- as.Date(all_trips$started_at, format = "%m/%d/%Y %H:%M") #The default format is yyyy-mm-dd, so we change it to the one our dates have
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")
```

Also, turn our dates into the R Date-Time Class

```{r}
all_trips$started_at <-as.POSIXct(all_trips$started_at,format="%m/%d/%Y %H:%M",tz='UTC')
all_trips$ended_at <- as.POSIXct(all_trips$ended_at,format="%m/%d/%Y %H:%M",tz='UTC')

str(all_trips)
```

Add a "ride_length" calculation to all_trips (in seconds), we already
did this on Excel, but I like to remind myself how I would do it if I
did everything in R. This is a useful library if you find the code below
confusing
<https://stat.ethz.ch/R-manual/R-devel/library/base/html/difftime.html>

```{r}
all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at, units = c("secs"))
```

Inspect the structure of the columns

```{r}
str(all_trips)
```

Convert "ride_length" from Factor to numeric so we can run calculations
on the data

```{r}
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(all_trips$ride_length)
is.numeric(all_trips$ride_length)
```

Remove "bad" data The dataframe includes a few hundred entries when
bikes were taken out of docks and checked for quality by Divvy or
ride_length was negative We will create a new version of the dataframe
(v2) since data is being removed
<https://www.datasciencemadesimple.com/delete-or-drop-rows-in-r-with-conditions-2/>

```{r}
all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]
```

# STEP 4: CONDUCT DESCRIPTIVE ANALYSIS

Descriptive analysis on ride_length (all figures in seconds)

```{r}
mean(all_trips_v2$ride_length, na.rm = TRUE) #straight average (total ride length / rides)
median(all_trips_v2$ride_length, na.rm = TRUE) #midpoint number in the ascending array of ride lengths
max(all_trips_v2$ride_length, na.rm = TRUE) #longest ride
min(all_trips_v2$ride_length, na.rm = TRUE) #shortest ride
```

You can condense the four lines above to one line using summary() on the
specific attribute

```{r}
summary(all_trips_v2$ride_length, na.rm = TRUE)
```

Compare members and casual users

```{r}
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)
```

#### In this part, we have found that, to my happy surprise, casual member rides are generally longer than the member rides. Now we know there is a financial opportunity to turn casual riders into members

For our next step we need our days in order, currently they are not so
let's change that

```{r}
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
```

See the average ride time by each day for members vs casual users

```{r}
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
```

Analyze ridership data by type and weekday

```{r}
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>%         # creates weekday field using wday()
  group_by(member_casual, weekday) %>%                         # groups by usertype and weekday
  summarise(number_of_rides = n()							                 # calculates the number of rides and
            ,average_duration = mean(ride_length)) %>% 		     # average duration
  arrange(member_casual, weekday)								               # sorts
```

Let's visualize the number of rides by rider type

```{r}
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")
```

#### Most members, rent bikes within the week (Mon-Fri) and most casuals, rent bikes in the weekend. The casual to member ratio goes up on the weekend. I would recommend to promote this days more since there is a high opportunity of converting casual into members in this day.

#### Maybe a weekly activity like hosting bike-compatible events on weekends (races, search&find, collecting tokens at locations).

#### Another useful action to take is comparing the price of four day rides to a member payment in a favorable light.

Let's visualize the gender ratio between casual and members

Gender ratio in casual rides

```{r}
all_trips_v2 %>% 
  group_by(member_casual, gender) %>% 
  summarise(number_of_rides = n()) %>% 
  filter(member_casual == "casual",.preserve = FALSE) %>%   
  ggplot(aes(x = "", y = number_of_rides, fill = gender)) +
  geom_bar(stat="identity", width=1) +
  coord_polar("y", start=0)
```

#### Most people who ride casually rarely select a gender so we can't get much from this

Gender ratio in members rides

```{r}
all_trips_v2 %>% 
  group_by(member_casual, gender) %>% 
  filter(member_casual == "member") %>%
  summarise(number_of_rides = n()) %>% 
  ggplot(aes(x = "", y = number_of_rides, fill = gender)) +
  geom_bar(stat = "identity", width=1) +
  coord_polar("y", start=0) +
  ggtitle(label = 'Gender ratio in members rides', subtitle = 'Most of member rides are male riders')
```

#### Member rides are overwhelmingly male, we would expect a slight male preference but this is very drastic. The company is getting over 75% of their costumers from roughly 50% of population. Advertise more to women!

#### Still, advertising might not be enough, maybe this is a reflection of a bigger problem where women don't feel safe riding bikes on the city, this is a subject worth spending more research on

Let's create a visualization for average duration

```{r}
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
  geom_col(position = "dodge")
```

#### Member and casual ride-durations stay consistent throughout the week, casual member rides are significantly longer, there is potential to take advantage of this but all of them have certain drawback

Let's make a list of the most used start station by members and casuals
This is the top most used by members

```{r}
all_trips_v2 %>%
  group_by(member_casual, start_station_name) %>%
  mutate(station_usage = n()) %>%
  select(member_casual, start_station_name, station_usage) %>%
  arrange(desc(station_usage)) %>%
  filter(member_casual == "member") %>%
  distinct() %>%
  print()
```

Let's make a list of the most used destination station by members and
casuals

```{r}
all_trips_v2 %>%
  group_by(member_casual, end_station_name) %>%
  mutate(station_usage = n()) %>%
  select(member_casual, end_station_name, station_usage) %>%
  arrange(desc(station_usage)) %>%
  filter(member_casual == "casual") %>%
  distinct() %>%
  print()
```

#### We can't do analysis on this part yet! I will show my stakeholders a map with the most used stations, which is achievable in R but I want to make use of a unique Tableau tool for my analysis and visualization

Let's see if there are significant age differences among members and
casual rides

```{r}
all_trips_v2 %>%
  group_by(member_casual, birthyear) %>%
  mutate(people = n()) %>%
  select(member_casual, birthyear, people) %>%
  arrange(desc(people)) %>%
  distinct() %>%
  ggplot(aes(x = birthyear, y = people, fill = member_casual)) +
  geom_col(position = "dodge")+
  xlim(1940, 2003)
```

#### As expected, the majority of rides are done by the youngest adults and young adults in general should be the main age target

# STEP 5: EXPORT SUMMARY FILE FOR FURTHER ANALYSIS

Create a csv file that we will visualize in Excel, Tableau, or my
presentation software N.B.: This file location is for a Mac. If you are
working on a PC, change the file location accordingly

```{r}
counts <- aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
write.csv(counts, file = '~/Desktop/Cyclystic_2019byQuarter/avg_ride_length.csv')
```

# We are done!
